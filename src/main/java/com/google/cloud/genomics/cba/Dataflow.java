package com.google.cloud.genomics.cba;

import java.io.FileReader;
import java.util.Collections;

import com.google.api.client.googleapis.auth.oauth2.GoogleClientSecrets;
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.auth.oauth2.GoogleTokenResponse;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.cloud.dataflow.sdk.Pipeline;
import com.google.cloud.dataflow.sdk.io.TextIO;
import com.google.cloud.dataflow.sdk.options.DataflowPipelineOptions;
import com.google.cloud.dataflow.sdk.options.PipelineOptionsFactory;
import com.google.cloud.dataflow.sdk.runners.BlockingDataflowPipelineRunner;
import com.google.cloud.dataflow.sdk.transforms.DoFn;
import com.google.cloud.dataflow.sdk.transforms.ParDo;
import com.google.gson.JsonArray;
import com.google.gson.JsonObject;

import com.google.cloud.dataflow.sdk.transforms.Count;
import com.google.cloud.dataflow.sdk.values.KV;

/**
 * <h1>Dataflow APIs</h1> This class uses the Google Dataflow functionalities to
 * import annotation sets, and annotate VCF files 
 * 
 * @version 1.0
 * @since 2016-07-17
 */

public class Dataflow {

	/**
	 * This method is used to create annotations using Google Dataflow
	 * pipelines.
	 * 
	 * @param TOKEN
	 *            A piece of data generated by the server which identifies a
	 *            user.
	 * @param projectId
	 *            The ID of the Google Cloud project
	 * @param stagingPath
	 *            The staging path for the Google Dataflow execution 
	 * @param annotationInputTextBucketAddr
	 *            The address of the input file in th Cloud.
	 * @param annotationOutputJSONBucketAddr
	 *            The address of the output file in the Cloud.
	 */

	// private static final String STORAGE_SCOPE =
	// "https://www.googleapis.com/auth/devstorage.read_write";
	public static void runPipeline(final String TOKEN, final String annotationSetId, final String projectId,
			final String stagingPath, final String annotationInputTextBucketAddr,
			final String annotationOutputJSONBucketAddr) {

		DataflowPipelineOptions options = PipelineOptionsFactory.create().as(DataflowPipelineOptions.class);
		options.setRunner(BlockingDataflowPipelineRunner.class);
		options.setProject(projectId);
		options.setStagingLocation(stagingPath);
		Pipeline p = Pipeline.create(options);

		// options.setMaxNumWorkers(4);
		// options.setNumWorkers(4);

		p.apply(TextIO.Read.from(annotationInputTextBucketAddr))
				.apply(ParDo.named("ExtractAnnotations").of(new DoFn<String, String>() {
					@Override
					public void processElement(ProcessContext c) {
						// JsonArray datasets = new JsonArray();
						// int index = 0;
						for (String line : c.element().split("\n")) {
							// index++;
							if (!line.isEmpty()) {
								String[] words = line.split("\t");

								/* batch creation */
								// System.out.println(words.toString());
								// System.out.println("annotationSetId: " +
								// annotationSetId);
								JsonObject newAnnotation = HG19_EUR.createAnnotationJSON(annotationSetId, words);
								// datasets.add(newAnnotation);

								/* one by one creation */
								try {
									HG19_EUR.createdbSNPAnnotation(TOKEN, annotationSetId, words);
								} catch (Exception e) {
									System.err.println(e.getMessage());
								} catch (Throwable t) {
									t.printStackTrace();
								}
								// String[] lines = c.element().split("\n");
								// StartAnnotationEngine.LOG.warning("Index: " +
								// index + " Lines: " + lines.length);

								// if (index == 1000) {
								//
								// JsonObject annotations = new JsonObject();
								// annotations.add("annotations", datasets);
								// System.out.println(annotations.toString());
								// Annotation.batchCreateAnnotation(TOKEN,
								// annotations.toString());
								// datasets = new JsonArray(); // remove the
								// // old elements
								// index = 0;
								// StartAnnotationEngine.LOG.warning("2
								// Annotation Submitted!");
								// }
								c.output(newAnnotation.toString());
							}
						}
					}
				})).apply(TextIO.Write.to(annotationOutputJSONBucketAddr));
		p.run();
	}
}
