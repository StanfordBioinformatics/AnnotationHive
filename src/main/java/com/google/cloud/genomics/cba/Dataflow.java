package com.google.cloud.genomics.cba;


import java.io.FileReader;
import java.util.Collections;

import com.google.api.client.googleapis.auth.oauth2.GoogleClientSecrets;
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.auth.oauth2.GoogleTokenResponse;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.cloud.dataflow.sdk.Pipeline;
import com.google.cloud.dataflow.sdk.io.TextIO;
import com.google.cloud.dataflow.sdk.options.DataflowPipelineOptions;
import com.google.cloud.dataflow.sdk.options.PipelineOptionsFactory;
import com.google.cloud.dataflow.sdk.runners.BlockingDataflowPipelineRunner;
import com.google.cloud.dataflow.sdk.transforms.DoFn;
import com.google.cloud.dataflow.sdk.transforms.ParDo;
import com.google.gson.JsonArray;
import com.google.gson.JsonObject;

/**
 * <h1>Dataflow APIs</h1> This class uses the Google Dataflow functionalities  
 * to execute the Google Genomics REST APIs
 * 
 * @version 1.0
 * @since 2016-07-17
 */


public class Dataflow {

	   /**
	   * This method is used to create annotations using Google Dataflow pipelines. 
   	   * @param TOKEN A piece of data generated by the server which identifies a user.
   	   * @param projectId The ID of the Google Cloud project
   	   * @param storagePath The path of a Google Cloud Storage
   	   * @param annotationInputTextBucketAddr The address of the input file in th Cloud.
	   * @param annotationOutputJSONBucketAddr The address of the output file in the Cloud. 
	   */
	
//	private static final String STORAGE_SCOPE =
//		      "https://www.googleapis.com/auth/devstorage.read_write";
	public static void runPipeline(final String TOKEN, final String annotationSetId, final String projectId, final String storagePath,
			final String annotationInputTextBucketAddr, final String annotationOutputJSONBucketAddr) {

		DataflowPipelineOptions options = PipelineOptionsFactory.create().as(DataflowPipelineOptions.class);
		options.setRunner(BlockingDataflowPipelineRunner.class);
		options.setProject(projectId);
		// The 'gs' URI means that this is a Google Cloud Storage path
		options.setStagingLocation(storagePath) ; 
		options.setMaxNumWorkers(8);
		options.setNumWorkers(8);

	    // Build an account credential.
//	    GoogleCredential credential = GoogleCredential.getApplicationDefault()
//	        .createScoped(Collections.singleton(STORAGE_SCOPE));
//	    
//		options.setGcpCredential(credential);
//		
		
//		
//        options.setGcpCredential(
//                DatastoreHelper.getServiceAccountCredential(
//                    "project_a@developer.gserviceaccount.com",
//                        SecurityUtils.loadPrivateKeyFromKeyStore(
//                                SecurityUtils.getPkcs12KeyStore(),
//                                Sample.class.getClass().getResourceAsStream(
//                                        "/projecta-0450c49cbddc.p12"),
//                                "notasecret",
//                                "privatekey",
//                                "notasecret"),
//                        Arrays.asList(
//                                "https://www.googleapis.com/auth/cloud-platform",
//                                "https://www.googleapis.com/auth/devstorage.full_control",
//                                "https://www.googleapis.com/auth/userinfo.email",
//                                "https://www.googleapis.com/auth/datastore")));
//		
		
		Pipeline p = Pipeline.create(options);
		
		p.apply(TextIO.Read.from(annotationInputTextBucketAddr))
				.apply(ParDo.named("ExtractAnnotations").of(new DoFn<String, String>() {
					@Override
					public void processElement(ProcessContext c) {
						JsonArray datasets = new JsonArray();
						int index =0;	
						for (String line : c.element().split("\n")) {
							index++;
							if (!line.isEmpty()) {
								String[] words = line.split("\t");

								/* batch creation */
								JsonObject newAnnotation = HG19_EUR.createAnnotationJSON(annotationSetId, words);
								datasets.add(newAnnotation);
								
								/* one by one creation */
								try {
									HG19_EUR.createdbSNPAnnotation(TOKEN, annotationSetId, words);
								} catch (Exception e) {
									System.err.println(e.getMessage());
								} catch (Throwable t) {
									t.printStackTrace();
								}

								c.output(newAnnotation.toString());
							}
//							if (index == 1000){
//								
//								JsonObject annotations = new JsonObject();
//								annotations.add("annotations", datasets);
//								System.out.println(annotations.toString());
//								Annotation.batchCreateAnnotation(TOKEN, annotations.toString());
//								datasets = new JsonArray(); //remove the old elements
//								index = 0;
//								StartAnnotationEngine.LOG.warning("1000");
//							}	
						}
					}
				})); //.apply(TextIO.Write.to(annotationOutputJSONBucketAddr));

		p.run();

	}

}
